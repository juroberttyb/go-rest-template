// Code generated by mockery v2.41.0. DO NOT EDIT.

package mq

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMQ is an autogenerated mock type for the MQ type
type MockMQ struct {
	mock.Mock
}

// Receive provides a mock function with given fields: topic
func (_m *MockMQ) Receive(topic string) (<-chan []byte, error) {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 <-chan []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (<-chan []byte, error)); ok {
		return rf(topic)
	}
	if rf, ok := ret.Get(0).(func(string) <-chan []byte); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveWithContext provides a mock function with given fields: ctx, topic
func (_m *MockMQ) ReceiveWithContext(ctx context.Context, topic string) (<-chan []byte, error) {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveWithContext")
	}

	var r0 <-chan []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan []byte, error)); ok {
		return rf(ctx, topic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan []byte); ok {
		r0 = rf(ctx, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: topic, data
func (_m *MockMQ) Send(topic string, data interface{}) error {
	ret := _m.Called(topic, data)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(topic, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendWithContext provides a mock function with given fields: ctx, topic, data
func (_m *MockMQ) SendWithContext(ctx context.Context, topic string, data interface{}) error {
	ret := _m.Called(ctx, topic, data)

	if len(ret) == 0 {
		panic("no return value specified for SendWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, topic, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockMQ creates a new instance of MockMQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMQ(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMQ {
	mock := &MockMQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
