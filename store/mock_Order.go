// Code generated by mockery v2.41.0. DO NOT EDIT.

package store

import (
	context "context"

	models "github.com/A-pen-app/kickstart/models"
	mock "github.com/stretchr/testify/mock"
)

// MockOrder is an autogenerated mock type for the Order type
type MockOrder struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, kickstartID
func (_m *MockOrder) Get(ctx context.Context, kickstartID string) (*models.Order, error) {
	ret := _m.Called(ctx, kickstartID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Order, error)); ok {
		return rf(ctx, kickstartID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Order); ok {
		r0 = rf(ctx, kickstartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, kickstartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIsAttended provides a mock function with given fields: ctx, uid, kickstartID
func (_m *MockOrder) GetIsAttended(ctx context.Context, uid string, kickstartID string) (bool, error) {
	ret := _m.Called(ctx, uid, kickstartID)

	if len(ret) == 0 {
		panic("no return value specified for GetIsAttended")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, uid, kickstartID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, uid, kickstartID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, uid, kickstartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyOrders provides a mock function with given fields: ctx, uid, limit, isAttending
func (_m *MockOrder) GetMyOrders(ctx context.Context, uid string, limit int, isAttending bool) ([]*models.Order, error) {
	ret := _m.Called(ctx, uid, limit, isAttending)

	if len(ret) == 0 {
		panic("no return value specified for GetMyOrders")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, bool) ([]*models.Order, error)); ok {
		return rf(ctx, uid, limit, isAttending)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, bool) []*models.Order); ok {
		r0 = rf(ctx, uid, limit, isAttending)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, bool) error); ok {
		r1 = rf(ctx, uid, limit, isAttending)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderIDs provides a mock function with given fields: ctx, uid, limit, status
func (_m *MockOrder) GetOrderIDs(ctx context.Context, uid string, limit int, status models.OrderStatus) ([]string, error) {
	ret := _m.Called(ctx, uid, limit, status)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, models.OrderStatus) ([]string, error)); ok {
		return rf(ctx, uid, limit, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, models.OrderStatus) []string); ok {
		r0 = rf(ctx, uid, limit, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, models.OrderStatus) error); ok {
		r1 = rf(ctx, uid, limit, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, limit
func (_m *MockOrder) GetOrders(ctx context.Context, limit int) ([]*models.Order, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Order, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Order); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, userID, kickstartID, email
func (_m *MockOrder) New(ctx context.Context, userID string, kickstartID string, email *string) error {
	ret := _m.Called(ctx, userID, kickstartID, email)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string) error); ok {
		r0 = rf(ctx, userID, kickstartID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockOrder creates a new instance of MockOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrder {
	mock := &MockOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
