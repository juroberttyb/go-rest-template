// Code generated by mockery v2.41.0. DO NOT EDIT.

package store

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCrypto is an autogenerated mock type for the Crypto type
type MockCrypto struct {
	mock.Mock
}

// CreateKey provides a mock function with given fields: ctx, keyRing, keyID
func (_m *MockCrypto) CreateKey(ctx context.Context, keyRing string, keyID string) error {
	ret := _m.Called(ctx, keyRing, keyID)

	if len(ret) == 0 {
		panic("no return value specified for CreateKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, keyRing, keyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Decrypt provides a mock function with given fields: ctx, keyID, base64Ciphertext
func (_m *MockCrypto) Decrypt(ctx context.Context, keyID string, base64Ciphertext string) ([]byte, error) {
	ret := _m.Called(ctx, keyID, base64Ciphertext)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, keyID, base64Ciphertext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, keyID, base64Ciphertext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, keyID, base64Ciphertext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKey provides a mock function with given fields: ctx, keyID
func (_m *MockCrypto) GetPublicKey(ctx context.Context, keyID string) (string, error) {
	ret := _m.Called(ctx, keyID)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, keyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, keyID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, keyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sign provides a mock function with given fields: ctx, keyID, msg
func (_m *MockCrypto) Sign(ctx context.Context, keyID string, msg string) (string, error) {
	ret := _m.Called(ctx, keyID, msg)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, keyID, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, keyID, msg)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, keyID, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: ctx, keyID, msg, signature
func (_m *MockCrypto) Verify(ctx context.Context, keyID string, msg string, signature string) error {
	ret := _m.Called(ctx, keyID, msg, signature)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, keyID, msg, signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCrypto creates a new instance of MockCrypto. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCrypto(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCrypto {
	mock := &MockCrypto{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
