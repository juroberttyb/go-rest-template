// Code generated by mockery v2.41.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

// db provides a mock function with given fields:
func (_m *MockDB) db() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for db")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// finalize provides a mock function with given fields:
func (_m *MockDB) finalize() {
	_m.Called()
}

// initialize provides a mock function with given fields: ctx, cfg
func (_m *MockDB) initialize(ctx context.Context, cfg dbConfig) {
	_m.Called(ctx, cfg)
}

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
