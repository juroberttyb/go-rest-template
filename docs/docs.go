// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/kickstarts": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a list of kickstarts where the parameter filter decides whether to return a list of general, attending, or attended kickstarts w.s.t to the given user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kickstart"
                ],
                "summary": "Get a list of kickstarts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag    []string            ` + "`" + `form:\"tag\" validate:\"optional\"` + "`" + `",
                        "name": "app_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "number of elements requested",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "normal",
                            "attending",
                            "attended",
                            "recommended"
                        ],
                        "type": "string",
                        "x-enum-comments": {
                            "Attended": "之前的活動",
                            "Attending": "已報名",
                            "Normal": "報名參加",
                            "Recommended": "推薦參加"
                        },
                        "x-enum-varnames": [
                            "Normal",
                            "Attending",
                            "Attended",
                            "Recommended"
                        ],
                        "description": "param to decide whether to return a list of recommended, attending, or attended kickstarts",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "next cursor value, use it when requesting next page",
                        "name": "next",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/api.pageResp"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Order"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.errorResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.errorResp"
                        }
                    }
                }
            }
        },
        "/kickstarts/attendance": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Attend a kickstart",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kickstart"
                ],
                "summary": "Attend a kickstart",
                "parameters": [
                    {
                        "description": "kickstart id to attend and user's email",
                        "name": "jsonBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.attendReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.errorResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.errorResp"
                        }
                    }
                }
            }
        },
        "/kickstarts/{kickstart_id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a kickstart with its detailed info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kickstart"
                ],
                "summary": "Get a kickstart",
                "parameters": [
                    {
                        "type": "string",
                        "example": "8306778b-7287-f72b-6b26-a95316de96e4",
                        "description": "ID of a kickstart",
                        "name": "kickstart_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.errorResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.errorResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.attendReq": {
            "type": "object",
            "required": [
                "kickstart_id"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "kickstart_id": {
                    "type": "string"
                }
            }
        },
        "api.errorResp": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                }
            }
        },
        "api.pageResp": {
            "type": "object",
            "properties": {
                "data": {},
                "next": {
                    "type": "string",
                    "example": "next cursor value"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "apply_info": {
                    "type": "string"
                },
                "awards": {
                    "type": "integer"
                },
                "charging_fee": {
                    "type": "string"
                },
                "coins": {
                    "type": "integer"
                },
                "contact": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "creator_id": {
                    "type": "string",
                    "example": "uuid"
                },
                "ending_at": {
                    "type": "string"
                },
                "hoster": {
                    "type": "string"
                },
                "hosting_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "uuid"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_deleted": {
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                },
                "max_participant_count": {
                    "type": "integer"
                },
                "participant_count": {
                    "type": "integer"
                },
                "picture_url": {
                    "type": "string"
                },
                "point": {
                    "type": "string"
                },
                "speaker": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.OrderStatus"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.OrderStatus": {
            "type": "string",
            "enum": [
                "normal",
                "attending",
                "attended",
                "recommended"
            ],
            "x-enum-comments": {
                "Attended": "之前的活動",
                "Attending": "已報名",
                "Normal": "報名參加",
                "Recommended": "推薦參加"
            },
            "x-enum-varnames": [
                "Normal",
                "Attending",
                "Attended",
                "Recommended"
            ]
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v1",
	Host:             "kickstart.gcp_project_name.tw",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Order (aka Broadcast Service) API",
	Description:      "This service provides message broadcasting service for official accounts,\nit also supports audience filtering and performance reporting.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
